SuperScanner Todo List

* Plan
  Do a help menu. Easy.
  Do a menu for switching scan methods. No, just map it to buttons.
  Do the ADSR.
  3D Scan Path. It will be sick.
  Do oversampling.

* DONE Implement Network ODE
* DONE Integrate with Existing Code
** DONE AudioEngine integration
** DONE Midi Integration
** DONE Final touches
   Implement tick function.
   Implement strike function. Easy. Done

* DONE Create Minimal GUI with Scanner visualization.
  Damn. Huge pain. Fuck.
  Don't worry about changing any parameters yet.
  Just exiting and saving/loading configuration maybe.
  Need to have a way to switch from stereoscopic to 
  regular visualization.

* DONE Test Simple Wave Scanner
  In-Progress. No working. Scanner apparently has numerous bugs that I will have to
  work through.
  Bugs worked through. Sound being produced.

* DONE Damping to simulate Release
  A function that does the opposite of strike()
  It will increase the damping and centering force so that
  the scanner goes to zero. Also need to fix a bug in the audio_engine.

* DONE Add Slew Limiter to tick() function
  Create portamento between notes.
  Made it, but its fucked and idk why.
  I plotted the step response of the slew limiter
  and it is working as intended. Idk why it is making
  a pew sound. It was because I forgot to set k_ = 0.
  Interesting. Idk why an incorrect phase could produce
  that issue.

* DONE Audio Engine bug
  Every like 1/100 strikes gives a weird sound. Might try without -O3.
  Removing O3 got rid of the bug. But also, evaluation was slow as shit.
  Could compile different files with O3 to isolate bug. I think its caused
  by compiling audio_engine with O3. I put the O3 flag on super_scanner.cpp
  only but the problem remains. Idk lol. The problem could be related to
  threading and race conditions. Ignoring for now.
  It was an issue with setting positions to 0 during strike().
  

* DONE Mono Visualization
  Easy
* Gui Features
  Will implement with text boxes.
  Controller will be used for making batch changes.
** DONE Change Scan Path Menu
   What is needed?
   A text box for each index in the scan path. Forget it.
   You were thinking about clicking on shit and typing in values.
   Maybe we can keep typing, but nix clicking. Just use arrow keys
   to scroll.
   Can type the desired number or use arrow keys to scroll up and down.
   Perhaps a top down view of the network with nodes labelled? Done.
   
** DONE Change Node Mass
   Make a menu for this exactly like Scan Path
   Also Map damping to controller
   And release damping.
** DONE Change Connection Matrix
   This is gonna be complex.
   Create new function to handle it. And draw it. Duh.
   not going to draw the scanner. Just connectivity matrix.
** DONE Change EQ Position
   Do a 3 row menu thing.
** DONE Select Nodes to be Constrained
   Do a row. Reuse the old code. No big deal.
   Easy Peasy.
** DONE Select Hammer Table
   Map to Controller.
** TODO Number Nodes in selection tables
** DONE Help Menu
   Print out the possible commands at the home screen.
** DONE Switch Between Compute Scan Table methods
   Self explanatory. Map it to a key?
** DONE Menu that shows overall parameters?
   Self explanatory.
   Add button for scan table methods here.
   Todo. Redo this. But make it so that the parameters visually correspond to the controller
   So I can tell which slider/knob does what. Lmao.
* TODO Create config file for mapping midi controller to functions.
  Definitely a late stage thing.
* TODO Convert to VST.
  Not even sure how to do this. Cant be that easy.
  This would probably be too hard actually.
* DONE Rotate Viewer
  Easy.
* DONE Panning Rotating Viewer
  Panning rotating view? Ooh, map it to a button. Easy.
* DONE Map Viewer position and rotation to knobs and sliders.
  Would be kinda cool.
* DONE 2D Visualize Scan Path
  This would be easy so I'm not really worried about it.
  Will Do now.
* TODO 3D Visualize Scan Path
  Show the Scan Path Changing over time. Would be sick.
  Also rainbow over time. Could be scaled with ADSR gains
  so that the scan path reaches the end when the release
  of the gain times out. idk how that would work though because
  sustain is a variable time thing. 
  Is Currently quite sick.
  Could use some shading work though.
  
* DONE Runge-Kutta instead of Euler
  Better accuracy. Less oscillation. Possibly a bit faster.
  I dont notice any difference in sound. It does seem more accurate
  Because there is less high freq oscillation.
  I am running at .01 timestep and it seems still accurate. Which is
  greatly improved. Actually, Noticing inaccuracy at .01s timestep.
  Prefer .001
* Backwards Euler Solver Instead of Runge Kutta
  Backwards Euler is very good for physical systems.
  It is the preferred solver for very stiff ODE's which this is.
  Could be actually pretty hard to implement.
  It will probably reduce high frequency oscillation between neighboring nodes
  which has been a significant issue and has had consequences for sound quality.
  
  Consider ODE: y' = f(y)
  
  Backward Euler Method:
  w_i1 = w_i + h*f(w_i1)

  Solve for w_i1 with Newton's Method
  w_i1 = wi - f(w_i)/df(wi)
  
  where df(wi) is the jacobian of f, and can be calculated through finite differences.

  iterate the above line until converged.
  Set y(i+1) = w_i1
  
  This would be completely impractical.
  The Jacobian would be a square matrix of size 6*num_nodes.
  The Jacobian would have to be calculated through finite differences, meaning 6*num_nodes
  calls to ODE with a different state value changed each time. Or maybe I could figure out
  a way to do it analytically. But I dont think so.
  Additionally the Jacobian would have to be inverted and that would very intensive.

  So this is not going to happen.
  
  
* Speed Hacks
** Structure of Arrays instead Array of Structures
   Use 3 arrays for X,Y,Z instead of an array of X,Y,Z vectors
   This creates a unit stride length which should greatly increase
   speed. Actually, this probably won't increase performance. Stride length
   is already unit stride actually.
** Full Matrix Implementation of Simulation
   Replace All math with EIgen matrix math.
   Actually, due to sparsity of the connectivity matrix, this would probably decrease speed.
** TODO Create List of all Non-Zero Connections
   Replace connection matrix nested for loop with precomputed sorted list of connections.
   Could be kinda difficult and might not even improve speed that much.

* DONE Save and Load
  Test completed.
  Would be extremely useful.
* DONE Better Scan Path Interpolation
  Need to do a first order interp between old table and new table.
  Prevent Discontinuities.. Hopefully improve sound quality.
  Implemented. No change in sound after viewing through audacity.

* DONE Map strikes to piano pedal.
  So note can ring out as frequency changes leading to a cool effect.
* DONE ADSR.
  Need a level controller as well.
  Start an ADSR when you hit a new note.
  Color of scanner changes with ADSR gain.
  Would be cool.
  ADSR will feature 12 linear segments. And
  You will be able to click them with the mouse.
  ADSR works. Clicks with mouse and everything.
  Just needs to resolve some audio clicks.
  I have changed the release thing. So that it just
  releases to zero with one segment.
  Redid the ADSR. Works better. Minimal clicking.
  Although I accomplished this by using a slew limiter on the adsr gain. which is cheating
  and reduces the snappiness of the attack envelope.
* DONE Sort ADSR points
  so that the points are increasing by x value.
  Easy. I know how to sort, I'm not an idiot.
  Actually its being pretty stupid so I'm ignoring it for now.
* TODO Polyphony?
  Using the scanner as a main oscillator. Do polyphony. Kinda hard.
  Would have to add the result of all notes together and perform 
  antialiasing at the end.
  
* DONE Add the Reverb
  Hopefully I can just copy paste the code I already wrote.
  But maybe not which would be bad. I can definitely create a
  window pretty easy I think. Damn I'd have to copy and paste
  the window code and the dsp code. Frick. Hopefully it works out.
  Easy peasy. It all worked out in the end.
* Higher Order Interpolation in Tick.
  Lead to smoother waveforms. Or just fucking low pass the wave maybe. IDK.
  This probably isn't necessary but maybe it would work. Idk.

Hard:
* DONE Adaptive Sampling and Anti-Aliasing
  This will be tough. Over-sample around 2x and then apply brick wall filter for freqs
  above 20,000. Hopefully this won't be too slow.
  2x seems to work best. Havent been able to confirm that it works with audacity
  spectrum analysis. But audibly it is definitely improved. I tried at 8x oversampling
  But that seemed to lowpass the signal way too much. It did more than antialias. It was
  Just lowpassing the signal a ton.
  
  I should make recordings in audacity and comare the different filters' effects.

* DONE Level Controller for adjusting volume
  Control output amplitude at constant level.
  Should do this before doing ADSR.
  I implemented a compressor.

* Known bugs:
With RK4, something weird is happening and not every strike gets counted.
//Sometimes hangs on exit.
//Weird segfault and memory corruption.
//fixed clicks by changing how scan table is scanned. Not using integer k_. Clicking greatly reduced between different notes.

* DONE Viewer has fisheye distortion going on.
  The distortion is actually pretty bad. I think I know what the cause is. I need to fix the pixel mapping functions. I'm using radians when I should be using similar triangles.
  Yep similar triangles fixed it.

Sometimes when I press a note, theres a weird laser pew sound. So the portamento is fucked probably.
* Benchmarks
  Using the RK4 solver takes about 4x as long as the Euler solver.
  Which is exactly what I expect.
  
  Forward Euler goes unstable where RK4 is stable.
  Forward EUler leads to more jagged wave forms.
